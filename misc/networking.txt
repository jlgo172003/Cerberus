Initial connection:
	client: NET_INITIATE_CONNECTION <quint16 client type>
	server: NET_CONNECTION_RESULT <quint16 result>

Server drop:
	server: NET_DISCONNECT <quint16 reason>
	*<reason> = disqualified, admin drop, client quit, [more here]

Client drop:
	client: NET_DISCONNECT <quint16 reason>
	*<reason> = see above

Point above this line is done by all apps. Below this lines, it's up to the subcomponent.

contestant-server network:
	authenticate
		client: QRY_AUTHENTICATE <user name>,<password> // note the comma separator: user,password
		server: INF_AUTHENTICATE <quint16 result> // 1 or 0, nothing more
    
	contest state request (ask for the round and the current contest state)
		client: QRY_CONTEST_STATE
		server: INF_CONTEST_STATE <quint16 round number> <quint16 status>
		*<status> = running, stopped, paused
    
	round n question request
		client: QRY_QUESTION_REQUEST <quint16 round number>
		server: INF_QUESTION_DATA <xml data>
    
	round 1,2,3 answer submit
		client: QRY_ANSWER_SUBMIT <xml data>
		server: INF_ANSWER_REPLY <quint16 result> // 1 or 0, nothing more
	
	server contest state change
		server: INF_CONTEST_STATE <quint16 round number> <quint16 status>
		*<status> = see above
    
presenter-server network:
	contest state request:
		client: QRY_CONTEST_STATE
		server: INF_CONTEST_STATE <quint16 round number> <quint16 status>
		*<status> = running, stopped, paused
	command wait:
		client: QRY_PRESENTER_READY
		// at this point, the client merely listens for server commands and replies a result code
	server command:
		//insert server commands here

admin-server network:
	// nothing here yet.